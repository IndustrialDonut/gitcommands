https://stackoverflow.com/questions/8452820/how-to-compare-the-working-tree-with-a-commit
git diff - shows the diff between working tree and git index
git diff --cached - shows the diff between git index and last commit
git diff HEAD - shows diff between working tree and last commit 


https://git-scm.com/docs/git-restore
git restore <file> - restores a file to the version stored in the index - this is the same as git restore --worktree
git restore --staged - restores the version of a file in the index to the version at the HEAD (by default). this has NO EFFECT ON THE WORKING TREE ! It is not 'taking the file from the index and placing it back in the working tree', it is just restoring the index. You would have to restore the working directory, then restore the index, if what you wanted was to delete changes made from the index in the working directory, and have your index changes back in your working directory.
git restore --staged --worktree - if for some reason you want to completely reset back to the HEAD both your index and working tree changes
--source=HEAD is the default for restoring --cached, and --source=cache (I guess?) is effectively the default for restoring --worktree
--source=TREE is what you may specify anyway for restoring to whatever you want.


https://git-scm.com/docs/git-reset
git reset - this is about resetting the index, working tree, or head to a previous commit
git reset - command run alone will restore the index to the head, unstaging changes, the same as git restore --cached *
git reset --hard - this will restore both the index and the working tree to the head, should be the same as git restore --cached --worktree
git reset --soft, --mixed, --hard , --soft will NOT TOUCH THE INDEX OR THE WORKING TREE, therefore when you JUST reset the head, you end up with your previous index
appearing now as relative changes ready to commit, and your working tree synced with that, so no changes in your working tree relative to your index.
mixed is the default, and so this will just reset the index and the head, not the working tree. Therefore when you reset, you will not appear to have staged changes,
and your index will be wiped.
hard will basically completely everything to a specified commit. it will wipe the index and the working tree.


https://git-scm.com/docs/git-revert
git revert
so basically,
git revert -n HEAD~3..HEAD~0 would walk back commits from now until 3 commits ago and the -n would mean not automatically make commits as it does so,
follow it up with a git commit to commit the revert all at once in a single commit with a nice message why.
git revert HEAD~3 would JUST apply a commit that reverts the changes made in HEAD~3 and that's it. no walking back every commit along the way.


git fetch - this basically retrieves the remote repository updates
git branch -a - that will list the remote branches that are available...
git merge origin/main - (for example) which would merge the fetched updates into your currently checked out branch
git pull - is effectively just git fetch and then git merge origin/branch

https://git-scm.com/docs/git-merge
git merge
so git merge I believe will take a branch and all of its NEW COMMITS since the time of diverging, and append them to the current head all as their own discrete commits.
This is opposed to making one single 'merge commit'
let's test this
This is correct. Each commit I just made was APPENDED to the HEAD of main when I ran 
git merge test/merge  from main branch
this is actually dependent on options:
--ff
--no-ff
--ff-only
A 'merge commit' will be created by default (--ff) if a simple 'fast forward' cannot be done, otherwise, a fast-forward (appending all the commits).
git pull and git merge will abort if the index is dirty. This is part of the PRE MERGE CHECKS section on the docs.
This means that you will always want to either have your changes committed, stashed, or un-staged (but this is discouraged to do a merge with non-trivial changes in working directory)


What about merge conflicts then? 
So, as I learned, it seems that the minimum conflicting case for a merge conflict would be modificatoins on line 1 and line 3 of a file, since git uses the surrounding lines for context. If this comes up, it was easy to resolve the way I wanted with VSCODE mergetool to accept the "combination" and that gave me just the result I wanted which would interlock the changes in the same file without adding any new lines by the standard "accept both" option
After merging, use
git branch -d branch_name - this will REQUIRE THAT THE BRANCH WAS SUCCESFULLY MERGED into the upstream branch before deleting it
do not use -D as that's an alias for FORCE delete even if it wasn't merged. Obviously only use that if you want to trash can everything in there.


https://git-scm.com/book/en/v2/Git-Branching-Rebasing
And rebasing instead of merge?
git rebase will take your changes on a branch and re-apply them on top of the state of another  branch

so like
git switch -c my_branch
edit things, add things
git commit
in the meantime, main had a commit made too
git rebase main (from my_branch)
git switch main
git merge my_branch
and you should have a nice linear history now instead of a merge commit, even though normally merge by fast-forward couldn't just work because there was a new commit in main. 
SEE PERILS OF REBASING https://git-scm.com/book/en/v2/Git-Branching-Rebasing
Do not rebase commits that exist outside your repository and that people may have based work on.
